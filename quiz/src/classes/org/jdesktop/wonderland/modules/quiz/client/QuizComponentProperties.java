/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.jdesktop.wonderland.modules.quiz.client;

import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.jdesktop.wonderland.client.ClientContext;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.annotation.PropertiesFactory;
import org.jdesktop.wonderland.client.cell.properties.spi.PropertiesFactorySPI;
import org.jdesktop.wonderland.client.comms.WonderlandSession;
import org.jdesktop.wonderland.client.login.LoginManager;
import org.jdesktop.wonderland.common.cell.state.CellComponentServerState;
import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.quiz.common.QuizComponentServerState;

/**
 *
 * @author Lisa Tomes
 */
@PropertiesFactory(QuizComponentServerState.class)
public class QuizComponentProperties extends javax.swing.JPanel implements PropertiesFactorySPI
{

  private CellPropertiesEditor editor = null;
  private String originalXmlPath;

  public QuizComponentProperties()
  {
    initComponents();
    txtPath.getDocument().addDocumentListener(new InfoTextFieldListener());
  }

  @Override
  public String getDisplayName()
  {
    return "Add Quiz";
  }

  @Override
  public void setCellPropertiesEditor(CellPropertiesEditor editor)
  {
    this.editor = editor;
  }

  @Override
  public JPanel getPropertiesJPanel()
  {
    return this;
  }

  @Override
  public void open()
  {
    CellServerState state = editor.getCellServerState();
    CellComponentServerState compState = state.getComponentServerState(QuizComponentServerState.class);
    if (state != null)
    {
      QuizComponentServerState sss = (QuizComponentServerState) compState;
      originalXmlPath = sss.getXmlPath();
      txtPath.setText(originalXmlPath);

      WonderlandSession session = LoginManager.getPrimary().getPrimarySession();
      String userName = session.getUserID().getUsername();
      File folder = ClientContext.getUserDirectory("/cache/wlcontent/users/" + userName + "/quiz");
      File[] listOfFiles = folder.listFiles();
      DefaultListModel fileListModel = new DefaultListModel();
      for (File file : listOfFiles)
      {
        fileListModel.addElement(file.getName());
      }
      listFiles.setModel(fileListModel);
    }
  }

  @Override
  public void close()
  {
  }

  @Override
  public void restore()
  {
    txtPath.setText(originalXmlPath);
  }

  @Override
  public void apply()
  {
    CellServerState state = editor.getCellServerState();
    CellComponentServerState compState
      = state.getComponentServerState(QuizComponentServerState.class);

    //Update values in Server State
    ((QuizComponentServerState) compState).setXmlPath(txtPath.getText());
    editor.addToUpdateList(compState);
  }

  class InfoTextFieldListener implements DocumentListener
  {

    @Override
    public void insertUpdate(DocumentEvent e)
    {
      checkDirty();
    }

    @Override
    public void removeUpdate(DocumentEvent e)
    {
      checkDirty();
    }

    @Override
    public void changedUpdate(DocumentEvent e)
    {
      checkDirty();
    }
  }

  private void checkDirty()
  {
    if (editor != null && (txtPath.getText().equals(originalXmlPath) == false))
    {
      editor.setPanelDirty(QuizComponentProperties.class, true);
    }
    else
    {
      if (editor != null)
      {
        editor.setPanelDirty(QuizComponentProperties.class, false);
      }
    }
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jLabel1 = new javax.swing.JLabel();
    txtPath = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    listFiles = new javax.swing.JList();

    jLabel1.setText("Path to the source file");

    txtPath.setText("jTextField1");

    listFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    jScrollPane1.setViewportView(listFiles);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jScrollPane1)
          .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(txtPath, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
        .addContainerGap(64, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(txtPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(113, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JList listFiles;
  private javax.swing.JTextField txtPath;
  // End of variables declaration//GEN-END:variables
}
